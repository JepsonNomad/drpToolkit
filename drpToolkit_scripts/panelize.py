''' 
drpToolkit panelize module

    panelize: This module can be used to generate timelapse-friendly summary images that
    sport an aligned image alongside GCC and rgbNDSI plots according to timepoint.


Recommended Python 3.7.

Author: Christian John
April 2021
GNU General Public License
'''

import argparse
from datetime import datetime
import os
import glob
import json
import pandas as pd
import numpy as np
import cv2 as cv
import matplotlib.dates as mdates
import matplotlib.pyplot as plt
import gc
import drpToolkit.panelize
from drpToolkit.prep import prepROI


def getArgs():
    """
    Get args from cmd line
    """
    parser = argparse.ArgumentParser(
                                description="""panelize: This module can be used to 
                                generate timelapse-friendly summary images that sport 
                                an aligned image alongside GCC and rgbNDSI plots 
                                according to timepoint.
    DEPENDENCIES: Python: numpy, opencv, pandas.""")
	
    parser.add_argument("-i", "--imgDir",
                        required=True,
                        help="REQUIRED: The full path to a directory of images "
                        "that have been aligned.")
                        
    parser.add_argument("-g", "--globString",
                        required=False,
                        default="*.JPG",
                        help="OPTIONAL: A glob-friendly filename search string "
                        "for images that have been aligned. By default, searches for *.JPG")
                                                                                        
    parser.add_argument("-t", "--table",
                        required=True,
                        default="extract.csv",
                        help="REQUIRED: A filename for the extracted index table "
                        "generated by extract.py")

    parser.add_argument("-r", "--ROIs",
                        required=False,
                        default=None,
                        help="OPTIONAL: The full path to a .csv file containing ROI "
                        "information. If None, full image GCC is calculated. "
                        "If not None, file should have 3 columns "
                        "named 'polygon_id','region_shape_attributes', and "
                        "'region_attributes'. See example data for sample ROI table "
                        "design.")
            
    return parser.parse_args()




def main():
    # Get arguments
    args = getArgs()
    # Benchmark
    startTime = datetime.now()
    # Find image directory
    imDir = args.imgDir
    # Navigate to directory
    os.chdir(imDir)
    # Find and sort images
    imgFPs = glob.glob(args.globString)
    imgFPs = sorted(imgFPs)
    # Import indices DataFrame
    dfPath = args.table
    extract_df = pd.read_csv(dfPath)
    # Prep ROI
    roiIDs, roiSPs, roiPolys = prepROI(roiFP = args.ROIs)
    # Generate output plots
    panelFolder = os.path.join(imDir, "panelized")
    if not os.path.exists(panelFolder):
	    os.mkdir(panelFolder)
    foldPanelize(imgFPs = imgFPs, roiPolys = roiPolys, indicesDF = extract_df, outdir = panelFolder)
    # Final benchmark
    stopTime = datetime.now()
    print("Elapsed time: " + str(stopTime - startTime))


if __name__ == "__main__":
    main()



  